//双重检测
// 线程安全的懒汉式单例
public class Singleton3 {
 
    //使用volatile关键字防止重排序，因为new Object()在底层是几步骤:1.memory=allocate()分配对象的内存空间,2.createInstance()初始化对象,3.instance=memory 设置instance指向刚分配的内存
    //若3.和2.被重排序换位置了，那结果是先分配内存空间，然后指向,最后初始化对象。那么我们这时候虽然是有synchronize，但是两次进入都发现没有初始化对象，因为他指向内存分配的空间了，尚未初始化对象。
    private static volatile Singleton3 singleton3;
 
    private Singleton3() {//static不能用来修饰构造方法，因为static修饰的是与对象无关的内容，而构造确实生成对象的五大方法之一
    }
 
    public static Singleton3 getSingleton3() {
        // Double-Check idiom
        if (singleton3 == null) {
            synchronized (Singleton3.class) {       // 1
                // 只需在第一次创建实例时才同步
                if (singleton3 == null) {       // 2
                    singleton3 = new Singleton3();      // 3
                }
            }
        }
        return singleton3;
    }
}
