/*
*最佳情况：T(n) = O(nlogn);最差情况：T(n) = O(n2);平均情况：T(n) = O(nlogn)
*快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：
*步骤1：从数列中挑出一个元素，称为 “基准”（pivot ）；
*步骤2：重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；
*步骤3：递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。
*/
import java.util.*;
import java.lang.*;

public class sort {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String t = in.nextLine();
        int len = t.length();
        int[] arr = new int[len];
        for (int i = 0; i < len; i++) {
            arr[i] = Integer.parseInt(t.substring(0, 1));//Integer.parseInt把()里的内容转换成整数，substring字符串的一个函数，表示返回一个新字符串
            t = t.substring(1);//获取字符串的起始位置，将后面所有的字符串
        }
        QuickSort(arr,0,len-1);//len-1是指最后一位数的下角标
        for (int j = 0; j < arr.length; j++) {
            System.out.print(arr[j]);
        }
    }

    public static int[] QuickSort(int[] arr, int start, int end) {//进行递归调用
        if(arr.length<0||start>end||start<0||end>arr.length)
            return null;
        int smallIndex = partition(arr,start,end);
        if(smallIndex>start)
            QuickSort(arr,start,smallIndex-1);//递归调用左半数组
        if(smallIndex<end)
            QuickSort(arr,smallIndex+1,end);//递归调用右半数组
        return arr;
    }

    public static int partition(int[] array, int start, int end){//进行快速排序
        int pivot = (int) (start + Math.random() * (end - start + 1));//随机选出一个基准，Math.randon()0-1之间的随机数
        int smallIndex = start - 1;//基准后期所在位置
        swap(array, pivot, end);//将基准放在最后一个元素中
        for (int i = start; i <= end; i++)
            if (array[i] <= array[end]) {
                smallIndex++;//用来区分左列和右列数组
                if (i > smallIndex)
                    swap(array, i, smallIndex);
            }
        return smallIndex;
    }
    
    public static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}
