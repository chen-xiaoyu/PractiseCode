class Solution {
    public boolean exist(char[][] board, String word) {
        if(board==null||board.length==0||board[0].length==0||word==null||word.length()==0){
            return false;
        }
        char[] w = word.toCharArray();
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(dfs(board,i,j,w,0)){
                    return true;
                }
            }
        }
        return false;
    }

    private boolean dfs(char[][] board,int i, int j,char[] w, int index){
        //边界的判断，如果越界直接返回false。index表示的是查找到字符串word的第几个字符，
        //如果这个字符不等于board[i][j]，说明验证这个坐标路径是走不通的，直接返回false
        if(i>=board.length||i<0||j>=board[0].length||j<0||board[i][j]!=w[index]){
            return false;
        }
        if(index==w.length-1){
            return true;
        }
        //沉岛思想
        char temp = board[i][j];
        board[i][j]='.';//char类型 单引号
        boolean res = dfs(board,i+1,j,w,index+1)||dfs(board,i-1,j,w,index+1)||dfs(board,i,j+1,w,index+1)||dfs(board,i,j-1,w,index+1);
        board[i][j]=temp;//恢复
        return res;
    }
}
