class Solution {
    public boolean isPalindrome(String s) {
        if(s==null||s.length()==0) return true;
        int len=s.length();
        StringBuffer str = new StringBuffer();
        for(int i=0;i<len;i++){
            char c = s.charAt(i);
            if(Character.isLetterOrDigit(c)){
                str.append(Character.toLowerCase(c));
            }
        }
        //双指针
        int newLen = str.length();
        int left=0;
        int right=newLen-1;
        while(left<right){
            if(str.charAt(left)!=str.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
//翻转字符串比较
class Solution {
    public boolean isPalindrome(String s) {
        if(s==null||s.length()==0) return true;
        int len=s.length();
        StringBuilder sb =new StringBuilder();
        for(int i=0;i<len;i++){
            char c =s.charAt(i);
            if(Character.isLetterOrDigit(c)){
                sb.append(Character.toLowerCase(c));
            }
        }
        StringBuilder sbRe =new StringBuilder(sb).reverse();
        return sb.toString().equals(sbRe.toString());
    }
}
