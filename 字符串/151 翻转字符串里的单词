/*
给定一个字符串，逐个翻转字符串中的每个单词。
示例 1：
输入: "the sky is blue"
输出: "blue is sky the"
说明：
无空格字符构成一个单词。
输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 进阶：
请选用 C 语言的用户尝试使用 O(1) 额外空间复杂度的原地解法。
*/
class Solution {
    public String reverseWords(String s) {
        if(s==null ||s.length()==0) return "";
        //去掉首位的空格
        s = s.trim();
        //该方法是将数组转化成List集合的方法,只适合用来遍历的。split("\\s+") 按空格制表符
        List<String> wordList =Arrays.asList(s.split("\\s+"));
        //反转指定列表中的元素的顺序
        Collections.reverse(wordList);
        return String.join(" ",wordList);
    }
}

class Solution {
    public String reverseWords(String s) {
        s = s.trim(); // 删除首尾空格
        int j = s.length() - 1, i = j;
        StringBuilder res = new StringBuilder();
        while(i >= 0) {
            while(i >= 0 && s.charAt(i) != ' ') i--; // 搜索首个空格
            res.append(s.substring(i + 1, j + 1) + " "); // 添加单词
            while(i >= 0 && s.charAt(i) == ' ') i--; // 跳过单词间空格
            j = i; // j 指向下个单词的尾字符
        }
        return res.toString().trim(); // 转化为字符串并返回
    }
}
