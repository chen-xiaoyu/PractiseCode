class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res  =new ArrayList<>();
        if(s==null||s.length()==0) return res;
        int len=s.length();
        boolean[][] dp =new boolean[len][len];
        for(int right=0;right<len;right++){
            for(int left=0;left<=right;left++){
                if(s.charAt(left)==s.charAt(right)&&(right-left<=2 ||dp[left+1][right-1])){
                    dp[left][right]=true;
                }
            }
        }
        Deque<String> stack =new ArrayDeque<>();
        splitPalindrome(s,0,len,dp,stack,res);
        return res;
    }
    //回溯算法
    private void splitPalindrome(String s, int start, int len,boolean[][] dp, Deque<String> stack, List<List<String>> res){
        if(start==len){
            res.add(new ArrayList<>(stack));
            return;
        }
        for(int i=start;i<len;i++){
            if(!dp[start][i]){
                continue;
            }
            stack.addLast(s.substring(start,i+1));
            splitPalindrome(s,i+1,len,dp,stack,res);
            stack.removeLast();
        }  
    }
}
