/***
思路：
 指针p1一次只走1步，所走的距离是D+S1.
 指针p2一次走2步，多走了n(n>=1)整圈，所走的距离是D+S1+n（S1+S2）。
 所以：2（D+S1）=D+S1+n(S1+S2) 即 D=（n-1）(S1+S2)+S2。
只要把其中也给指针放回头结点位置，另一个指针保持在首次相遇点，两个指针都是每次向前走一步，那么最终相遇点就是入环点。
*/
public class Solution {
    private ListNode getIntersect(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                return slow;
            }
        }
        return null;
}

    public ListNode detectCycle(ListNode head) {
        if (head == null) {
            return null;
        }
        ListNode intersect = getIntersect(head);
        if (intersect == null) {
            return null;
        }
        ListNode p1 = head;
        ListNode p2 = intersect;
        while (p1 != p2) {
            p1 = p1.next;
            p2 = p2.next;
        }
        return p1;
    }
}
