/*
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
示例：
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1==null || l2==null) return null;
        else if(l1==null) return l2;
        else if(l2==null) return l1;
        else{
            //2个头节点
            ListNode pre = new ListNode(-1);
            ListNode head = pre;
            int temp=0;
            int plus=0;
            while(l1!=null||l2!=null){
                int x=l1==null?0:l1.val;
                int y=l2==null?0:l2.val;
                temp =x+y+plus;
                plus=temp/10;
                head.next = new ListNode(temp%10);
                //都往下走一位
                if(l1!=null) l1=l1.next;
                if(l2!=null) l2=l2.next;
                head = head.next;
            }
            //最高位的进位
            if(plus>0){
                head.next = new ListNode(plus);
            }
            return pre.next;
        }
    }
}
