/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    public Node copyRandomList(Node head) {
        if(head==null) return null;
        copy(head);//拷贝每个节点
        randomCopy(head);//拷贝随机节点
        Node copyHead = head.next;
        handleNext(head);//处理next节点
        return copyHead;
    }

    private void copy(Node head){
        while(head!=null){
            Node temp = head.next;
            Node copyH = new Node(head.val);//新建复制节点
            head.next=copyH;
            copyH.next=temp;
            head=temp;
        }
    }

    private void randomCopy(Node head){
        while(head!=null){
            Node copy=head.next;
            if(head.random!=null){
                copy.random = head.random.next;
            }
            head=copy.next;//循环
        }
    }

    private void handleNext(Node head){
        while(head!=null){
            //处理最后一个节点
            if(head.next!=null&&head.next.next==null){
                head.next=null;
                break;
            }
            Node cur = head.next;
            head.next = cur.next;
            head=cur;//2个2个处理
        }
    }
}
