/*
在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。
示例 1:
输入: 4->2->1->3
输出: 1->2->3->4
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 //采用归并排序，快慢指针+递归
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null ||head.next==null) return head;
        ListNode slow =head,fast=head.next;
        //判断有先后的逻辑关系
        while(fast!=null&&fast.next!=null){
            slow = slow.next;
            fast=fast.next.next;
        }
        ListNode temp = slow.next;
        slow.next=null;//分隔开链表
        ListNode left =sortList(head);
        ListNode right =sortList(temp);
        //链表合并
        ListNode pre = new ListNode(-1);
        ListNode res=pre;
        //2个链表都不为空
        while(left!=null&&right!=null){
            if(left.val<right.val){
                pre.next=left;
                left=left.next;
            }else{
                pre.next=right;
                right=right.next;
            }
            pre=pre.next;
        }
        //其中一个链表为空
        pre.next=left==null?right:left;
        return res.next;
    }
}
