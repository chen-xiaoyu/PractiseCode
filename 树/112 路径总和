/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //版本1 递归
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root == null) return false;
        sum -= root.val;
        if(root.left==null && root.right==null && sum==0) return true;
        return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);
    }
}

//版本2 广度优先遍历
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root == null) return false;
        Queue<TreeNode> qNode = new LinkedList<TreeNode>();
        Queue<Integer> qVal = new LinkedList<Integer>();
        qNode.offer(root);
        qVal.offer(root.val);
        while(!qNode.isEmpty()){
            TreeNode tempNode = qNode.poll();
            int tempVal = qVal.poll();
            if(tempNode.left==null && tempNode.right==null){
                if(tempVal==sum) return true;
                continue;
            }
            if(tempNode.left!=null){
                qNode.offer(tempNode.left);
                qVal.offer(tempNode.left.val+tempVal);
            }
            if(tempNode.right!=null){
                qNode.offer(tempNode.right);
                qVal.offer(tempNode.right.val+tempVal);
            }
        }
        return false;
    }
}
