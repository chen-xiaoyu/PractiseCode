/**
*规律发现这两个节点:
*二叉树搜索树的中序遍历(中序遍历遍历元素是递增的)
*第一个节点,是第一个按照中序遍历时候前一个节点大于后一个节点,我们选取前一个节点,这里指节点4;
*第二个节点,是在第一个节点找到之后, 后面出现前一个节点大于后一个节点,我们选择后一个节点,这里指节点1;
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode firstNode =null;
    TreeNode secondeNode =null;
    TreeNode pre = new TreeNode(Integer.MIN_VALUE);//设定一个最小值
    public void recoverTree(TreeNode root) {
        if(root==null) return;
        inOrder(root);
        int temp = firstNode.val;//数值交换
        firstNode.val = secondeNode.val;
        secondeNode.val =temp;
    }

    public void inOrder(TreeNode root){
        if(root==null) return;
        inOrder(root.left);//中序遍历
        if(firstNode==null && pre.val>root.val) firstNode = pre;
        if(firstNode!=null && pre.val>root.val) secondeNode = root;
        pre = root;
        inOrder(root.right);
    }
}
