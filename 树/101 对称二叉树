// 递归的方法
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return check(root, root); //用两颗相同的树去判断
    }

    public boolean check(TreeNode p, TreeNode q) {
        if (p == null && q == null) {
            return true;
        }
        if (p == null || q == null) {
            return false;
        }
        return p.val == q.val && check(p.left, q.right) && check(p.right, q.left);
    }
}

// 迭代的方法
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return check(root, root);
    }

    public boolean check(TreeNode u, TreeNode v) {
        Queue<TreeNode> q = new LinkedList<TreeNode>(); //通过根结点入栈2次，对比两两结点间是否相同
        q.offer(u);
        q.offer(v);
        while (!q.isEmpty()) { //值的判断
            u = q.poll();
            v = q.poll();
            if (u == null && v == null) { //存在子节点为空的情况
                continue;
            }
            if ((u == null || v == null) || (u.val != v.val)) { //特殊情况
                return false;
            }

            q.offer(u.left);
            q.offer(v.right);

            q.offer(u.right);
            q.offer(v.left);
        }
        return true;
    }
}
