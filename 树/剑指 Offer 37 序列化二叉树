/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null) return "[]";
        StringBuilder sb =new StringBuilder("[");
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode temp =q.poll();
            if(temp!=null){
                sb.append(temp.val+",");
                q.add(temp.left);
                q.add(temp.right);
            }
            //append
            else sb.append("null"+",");
        }
        //将多余的，去掉
        sb.deleteCharAt(sb.length()-1);
        sb.append("]");
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data=="[]") return null;
        String[] val = data.substring(1,data.length()-1).split(",");//把[],去掉
        TreeNode root = new TreeNode(Integer.parseInt(val[0]));
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int i=1;
        while(!q.isEmpty()){
            TreeNode temp = q.poll();
            //字符串用equals
            if(!val[i].equals("null")){
                temp.left=new TreeNode(Integer.parseInt(val[i]));
                q.add(temp.left);
            }
            i++;
            if(!val[i].equals("null")){
                temp.right=new TreeNode(Integer.parseInt(val[i]));
                q.add(temp.right);
            }
            i++;
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
