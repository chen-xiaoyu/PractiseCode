/*
给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。
例如：
给定二叉树 [3,9,20,null,null,15,7],
   3
   / \
  9  20
    /  \
   15   7
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res  = new ArrayList<>();
        if(root==null) return res;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int flag=1;
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> temp = new ArrayList<>();
            //遍历奇数层
            while(size>0&& flag==1){
                TreeNode remove = q.poll();
                temp.add(remove.val);
                if(remove.left!=null) q.add(remove.left);
                if(remove.right!=null) q.add(remove.right);
                //注意跳出循环
                size--;
            }
            //遍历偶数层
            while(size>0&& flag==-1){
                TreeNode remove = q.remove();
                temp.add(0,remove.val);
                if(remove.left!=null) q.add(remove.left);
                if(remove.right!=null) q.add(remove.right);
                //注意跳出循环
                size--;
            }
            res.add(temp);
            flag=flag*(-1);
        }
        return res;
    }
}
