/*优点：bitmap算法，可以使用户ID在bitmap中只占1个bit,内存是哈希表所占内存的1/32，甚至更少。
* 使用一个命名为words的long类型数组来存储所有的二进制位。每一个long元素占用其中的64位。
* 把bitmap中某一位设为1，需要经过2步：
* 1.定位到words中的对应的long元素。
* 2.通过与运算修改long元素的值
* 如果要查看bitmap中某一位是否为1，也需要经过2步。
* 1.定位到words中对应的long元素。
* 2. 判断long元素对应的二进制位是否为1。
*/
import java.util.*;

public class bitMap {
    //每一个word是long类型元素，对应一个64位二进制数据
    private long[] words;
    //bitmap的位数大小
    private int size;
    public MyBitmap(int s){
        this.size=s;
        this.words=new long[(getWordIndex(size-1)+1)];
    }
    /*
    * 判断某一位的状态
    * 位图的第bitIndex位
    * */
    public boolean getBit(int bitIndex){
        if(bitIndex<0||bitIndex>size-1){
            throw new IndexOutOfBoundsException("超出bitmap有效范围")
        }
        int wordIndex=getWordIndex(bitIndex);
        return (words[wordIndex]&(1L<<bitIndex))!=0;
    }

    /*
    * 把bitmap某一位设置为true
    * */
    public void setBit(int bitIndex){
        if(bitIndex<0||bitIndex>size-1){
            throw new IndexOutOfBoundsException("超出bitmap有效范围");
        }
        int wordIndex=getWordIndex(bitIndex);
        words[wordIndex]|=(1L<<bitIndex);
    }


    private int getWordIndex(int bitIndex){
        //右移6位，相当于除以64
        return bitIndex>>6;
    }
    public static void main(String[] args) {
        MyBitmap bitMap =new MyBitmap(128);
        bitMap.setBit(126);
        bitMap.setBit(75);
        System.out.println(bitMap.getBit(126));
        System.out.println(bitMap.getBit(75));
    }
}
