/**
*时间复杂度：O(Sn)，其中 S 是金额，n 是面额数。我们一共需要计算 O(S) 个状态，S 为题目所给的总金额。对于每个状态，每次需要枚举 n 个面额来转移状态，
*所以一共需要 OO(Sn) 的时间复杂度。
*空间复杂度：O(S)。DP 数组需要开长度为总金额 S 的空间。
*/
import java.util.*;
import java.lang.*;
class Solution {
    public int coinChange(int[] coins, int amount) {
        if(amount <=0 || coins ==null || coins.length==0) return 0;
        int max = amount+1;//初始为正无穷
        int[] dp = new int[max];
        Arrays.fill(dp,max);//将数组中填充元素，作为备忘录，记录数据状态
        dp[0] = 0;
        for(int i = 1;i<=amount;i++){
            for(int j=0;j<coins.length;j++){
                if(coins[j]<=i){//判断硬币组合中哪个数字最小，与之前的最优解对比
                    dp[i] = Math.min(dp[i-coins[j]]+1,dp[i]); 
                }
            }
        }
        return dp[amount]>amount?-1: dp[amount];//查看数组值
    }
}
