class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices==null || prices.length==0 || k ==0){
            return 0;
        }
        int len = prices.length;
        if(k>len/2) return maxProfitInf(prices);
        //k为有限
        int[][][] dp = new int[len][k+1][2];
        for(int i = 0; i<len; i++){
            for(int j =k;j>=1;j--){
                if(i==0){
                    dp[i][j][0] =0;
                    dp[i][j][1]=-prices[0];
                    continue;
                }//只有买入才算交易一次
                dp[i][j][0] = Math.max(dp[i-1][j][0], dp[i-1][j][1]+prices[i]);
                dp[i][j][1] = Math.max(dp[i-1][j][1], dp[i-1][j-1][0]-prices[i]);
            }
        }
        return dp[len-1][k][0];
    }
    //k为无穷
    private int maxProfitInf(int[] prices){
        int len = prices.length;
        //舒适化dp动态规划数组
        int[][] dp= new int[prices.length][2];
        //初始化原始值
        dp[0][0]=0;
        dp[0][1]=-prices[0];
        for(int i =1; i<prices.length; i++){
            //进行了不断的累加股票盈利
            dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1]+prices[i]);
            dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0]-prices[i]);
        }
        //卖出股票的价格
        return dp[prices.length-1][0];
    }
}
