/*
给定一个仅包含 0 和 1 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。
示例:
输入:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
输出: 6
*/
class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix==null||matrix.length==0||matrix[0].length==0) return 0;
        int row =matrix.length;
        int col= matrix[0].length;
        int[][] dp= new int[row][col];
        int maxArea=0;
        for(int i=0;i<row;i++)
            for(int j=0;j<col;j++){
                if(matrix[i][j]=='1'){
                    //以行为单位
                    dp[i][j]=j==0?1:dp[i][j-1]+1;
                    int width=dp[i][j];
                    for(int k=i;k>=0;k--){
                        width=Math.min(width,dp[k][j]);
                        maxArea=Math.max(maxArea,width*(i-k+1));
                    }
                }
            }
        return maxArea;
    }
}
