/*
在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。
示例:
输入: 
1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
输出: 4
*/

class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix==null||matrix.length==0||matrix[0].length==0) return 0;
        int row = matrix.length;
        int col = matrix[0].length;
        int[][] dp =new int[row][col];
        int maxSide=0;//有可能不存在
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j]=='1'){
                    if(i==0 ||j==0){
                        dp[i][j]=1;
                    } 
                    else{
                        //比较只能两数比较
                        dp[i][j]=Math.min(Math.min(dp[i-1][j-1],dp[i-1][j]),dp[i][j-1])+1;
                    }
                }
                maxSide=Math.max(maxSide,dp[i][j]);
            }
        }
        return maxSide*maxSide;
    }
}


class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix==null||matrix.length==0 ||matrix[0].length==0) return 0;
        int row =matrix.length;
        int col = matrix[0].length;
        //最大的边
        int maxSide=0;
        boolean flag =true;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j]=='1'){
                    //初始化maxSide
                    maxSide = Math.max(maxSide, 1);
                    //寻找以i，j为左上角的最大正方形
                    int tempSize = Math.min(row-i,col-j);
                    for(int m=1;m<tempSize;m++){
                        flag=true;
                        //判断新增的每一行是否可行
                        if(matrix[i+m][j+m]=='0') break;
                        for(int k=0;k<m;k++){
                            if(matrix[i+m][j+k]=='0' ||matrix[i+k][j+m]=='0'){
                                flag=false;
                                break;
                            }
                        }
                        //如果存在，得到最大边长
                        if(flag){
                            maxSide=Math.max(maxSide,m+1);
                        }else{
                            break;
                        }
                    }
                }
            }
        }
        return maxSide*maxSide;
    }
}
