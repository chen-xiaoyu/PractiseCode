/*
* 动态规划：复杂问题简化成规模较小的子问题，再从简单的子问题自底向上一步步递推，得到问题最优解。
* 要点：确定全局最优解和最优子结构之间的关系，以及问题的边界。
* ！！!: 自底向上求解（备忘录）
* 注意：优化：程序中并不需要保存整个表格，只需保存一行的数据，在计算下一行时，从右向左统计。（人多—人少）
* */
public class dp {
    /*
    * w：工人的数量；p:金矿开采所需的工人数量；g:金矿储量
    * */
    public static int getBestGold(int w, int[] p,int[] g){
        int[] result = new int[w+1];
        //结果
        for(int i=1;i<=g.length;i++){
            //人数
            for(int j=w;j>0;j--){
                if(j>=p[i]){
                    //上一座金矿开采和不开采
                    result[j] = Math.max(result[j-p[i-1]]+g[i-1],result[j]);
                }
            }
        }
        //返回最后一个格子的值
        return result[w];
    }
}
