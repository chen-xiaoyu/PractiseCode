/*
在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。
示例 1:
输入: [3,2,1,5,6,4] 和 k = 2
输出: 5
*/
//采用分治的思想，pivot所在的位置就是实际中应该在的位置。
class Solution {
    public int findKthLargest(int[] nums, int k) {
        if(nums==null|| nums.length==0) return -1;
        int left =0;
        int right=nums.length-1;
        int target=nums.length-k;
        int index;
        while(true){
            index = partition(nums,left,right);
            if(target==index) return nums[index];
            else if(index>target) right=index-1;
            else left=index+1;
        }
    }
    
    public int partition(int[] num,int l,int r){
        int pivot = (int)(l+Math.random()*(r-l+1));
        int smallIndex = l-1;
        swap(num,pivot,r);
        for(int i=l;i<=r;i++){
            if(num[i]<=num[r]){
                smallIndex++;
                if(i>smallIndex){//基准位置变化
                    swap(num,smallIndex,i);
                }
            }
        }
        return smallIndex;
    }
    
    private void swap(int[] array,int i,int j){
        int temp=array[i];
        array[i]=array[j];
        array[j]=temp;
    }
}
