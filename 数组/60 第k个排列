/*
给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。
按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：
"123"
"132"
"213"
"231"
"312"
"321"
给定 n 和 k，返回第 k 个排列。
说明：
给定 n 的范围是 [1, 9]。
给定 k 的范围是[1,  n!]。
示例 1:
输入: n = 3, k = 3
输出: "213"
*/
class Solution {
    public String getPermutation(int n, int k) {
        //存放1-9数字，方便增删
        List<Integer> num = new ArrayList<Integer>();
        for(int i=1;i<=n;i++){
            num.add(i);
        }
        //计算阶乘数,注意0！=1
        int[] fact =new int[n];
        fact[0]=1;
        for(int i=1;i<n;i++){
            fact[i]=fact[i-1]*i;
        }
        k=k-1;//第k个数相当于下标为k-1
        StringBuilder sb =new StringBuilder();
        for(int i=n;i>0;i--){
            int index = k/fact[i-1];
            k =k%fact[i-1];
            sb.append(num.get(index));
            num.remove(index);
        }
        return sb.toString();
    }
}
