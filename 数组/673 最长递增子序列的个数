class Solution {
    public int findNumberOfLIS(int[] nums) {
		    if (nums.length==0||nums==null) return 0;
        int len = nums.length;
        //以dp[i]结尾的最长递增子序列长度
		    int dp[] = new int[len];
        //以dp[i]结尾的最长递增子序列个数
		    int count[] = new int[len];
	    	Arrays.fill(dp, 1);
	    	Arrays.fill(count, 1);
		    int max = 0;
		    for (int i = 0; i < len; i++) {
			    for (int j = 0; j < i; j++) {
				    if (nums[i] > nums[j]) {
					    if (dp[j] + 1 > dp[i]) {
					    	dp[i] = dp[j] + 1;
					    	count[i] = count[j];
					    } else if (dp[j] + 1 == dp[i])
						    count[i] += count[j];
				    }
			    }
			    max = Math.max(max, dp[i]);//找出最长递增子序列的长度是多少
	    	}
	    	int ans = 0;
	    	for (int i = len - 1; i >= 0; i--) {
		    	if (dp[i] == max) {
			     	ans += count[i];
			    }
		    }
		   return ans;
	}
}
