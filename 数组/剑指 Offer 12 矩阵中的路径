class Solution {
    public boolean exist(char[][] board, String word) {
        if(board==null||board.length==0||board[0].length==0) return false;
        int row = board.length;
        int col = board[0].length;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(dfs(board,i,j,word,0)) return true;
            }
        }
        return false;
    }

    private boolean dfs(char[][] board, int i, int j, String word, int index){
        //越界判断
        if(i<0||i>=board.length||j<0||j>=board[0].length||board[i][j]!=word.charAt(index)){
            return false;
        }
        //组成成功
        if(index==word.length()-1) return true;
        char temp =board[i][j];//不允许重复进入
        board[i][j]='.';
        boolean f= dfs(board,i-1,j,word,index+1)||dfs(board,i+1,j,word,index+1)||dfs(board,i,j-1,word,index+1)||dfs(board,i,j+1,word,index+1);
        board[i][j]=temp;//重新更新
        return f;
    }
}
