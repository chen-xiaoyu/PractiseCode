class Solution {
    public int openLock(String[] deadends, String target) {
        //使用BFS算法来进行求解
        //记录需要跳过的节点
        Set<String> visited = new HashSet<>();
        Set<String> dead = new HashSet<>();

        //首先把deadends里面的元素放入到visited集合当中
        for(String str : deadends){
            dead.add(str);
        }

        //创建一个队列
        Queue<String> que = new LinkedList<>(); 

        //从起始点开始启动广度优先遍历 
        int step = 0;
        que.offer("0000");
        visited.add("0000");

        while(que.size()!=0){           
            int sz = que.size();
            for(int i=0;i<sz;i++){
                String cur = que.poll();
                //判断是否到达终点
                if(cur.equals(target)){
                    return step;
                }

                //判断是否需要跳过
                if(dead.contains(cur)){
                    continue;
                }

                //将相邻的节点加入集合当中
                for(int j=0;j<4;j++){
                    String up = plusone(cur,j);
                    if(!visited.contains(up)){
                        que.offer(up);
                        visited.add(up);
                    }
                    String down = minusone(cur,j);
                    if(!visited.contains(down)){
                        que.offer(down);
                        visited.add(down);
                    }
                }

            }
            step ++;
        }
       return -1;
    }

    //向上拨动一次
    public String plusone(String s,int i){
        char[] c = s.toCharArray();
        if(c[i]=='9'){
            c[i] = '0';
        }else{
            c[i]+=1;
        } 
        return new String(c);                                     
    }

    //向下拨动一次
    public String minusone(String s,int i){
       char[] c = s.toCharArray();
        if(c[i]=='0'){
            c[i] = '9';
        }else{
            c[i]-=1;
        }
        return new String(c);   
    }
}
